generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            Int        @id @default(autoincrement())
  firstName     String
  surname       String
  email         String     @unique
  password      String
  role          String     @default("admin")
  status        String     @default("active")
  imageUrl      String?
  emailVerified Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  approvedPosts BlogPost[]
}

model BlogPost {
  id                Int      @id @default(autoincrement())
  title             String
  content           String
  imageUrl          String?
  tags              String   @default("")
  views             Int      @default(0)
  published         Boolean  @default(false)
  approvedByAdminId Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  authorId          String
  approvedBy        Admin?   @relation(fields: [approvedByAdminId], references: [id])
  author            User     @relation("AuthoredPosts", fields: [authorId], references: [id])
  likedBy           User[]   @relation("LikedBlogPosts")
}

model Agent {
  id            Int        @id @default(autoincrement())
  firstName     String
  surname       String
  email         String     @unique
  nationalId    String
  agentId        String     @unique
  role          String     @default("agent")
  status        String     @default("Not Verified")
  imageUrl      String?
  emailVerified Boolean    @default(false)
  password      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  properties    Property[]
}

model User {
  id              String     @id @default(uuid())
  name            String
  surname         String
  email           String     @unique
  password        String
  status          String
  dob             DateTime
  blogLikes       String     @default("")
  propertyLikes   String     @default("")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  blogPosts       BlogPost[] @relation("AuthoredPosts")
  likedBlogPosts  BlogPost[] @relation("LikedBlogPosts")
  likedProperties Property[] @relation("LikedProperties")
}

model Property {
  id            Int            @id @default(autoincrement())
  title         String
  description   String         @default("")
  price         String
  type          PropertyType
  status        PropertyStatus
  location      String
  address       String
  rooms         Int            @default(0)
  amenities     String         @default("")
  coordinates   String         @default("")
  viewsThisWeek Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  imageUrl      String?
  agentId       Int
  agent         Agent          @relation(fields: [agentId], references: [id])
  likedByUsers  User[]         @relation("LikedProperties")
}

enum PropertyType {
  Residential
  Booking
  For_Rent
  For_Sale
  Business
  Student
  Lodges
  BookingHouse
}

enum PropertyStatus {
  Available
  Booked
  Rented
  Sold
  For_Sale
  For_Rent
}
