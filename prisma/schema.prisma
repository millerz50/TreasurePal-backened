generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            Int        @id @default(autoincrement())
  firstName     String
  surname       String
  email         String     @unique
  password      String
  role          String     @default("admin")
  status        String     @default("active")
  imageUrl      String?
  emailVerified Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  approvedPosts BlogPost[] @relation("ApprovedPosts")
}

model BlogPost {
  id                Int      @id @default(autoincrement())
  title             String
  content           String
  imageUrl          String?
  tags              String   @default("")
  views             Int      @default(0)
  published         Boolean  @default(false)
  approvedByAdminId Int?
  authorId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  approvedBy        Admin?   @relation("ApprovedPosts", fields: [approvedByAdminId], references: [id])
  author            User     @relation("AuthoredPosts", fields: [authorId], references: [id])
  likedBy           User[]   @relation("LikedBlogPosts")
}

model Agent {
  id             Int                @id @default(autoincrement())
  firstName      String
  surname        String
  email          String             @unique
  nationalId     String
  agentId        String             @unique
  role           String             @default("agent")
  status         String             @default("Not Verified")
  imageUrl       String?
  emailVerified  Boolean            @default(false)
  password       String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  metricRecords  AgentMetricRecord[] @relation("AgentToMetrics")
  properties     Property[]          @relation("AgentToProperties")
}

model AgentMetricRecord {
  id        String   @id @default(uuid())
  agentId   String
  metrics   Json
  createdAt DateTime @default(now())

  agent     Agent    @relation("AgentToMetrics", fields: [agentId], references: [agentId])
}

model User {
  id              String     @id @default(uuid())
  userId          String     @unique
  name            String
  surname         String
  email           String     @unique
  password        String
  status          String
  dob             DateTime
  occupation      String
  blogLikes       String     @default("")
  propertyLikes   String     @default("")
  avatarUrl       String     @default("/avatars/default.png")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  blogPosts       BlogPost[] @relation("AuthoredPosts")
  likedBlogPosts  BlogPost[] @relation("LikedBlogPosts")
  likedProperties Property[] @relation("LikedProperties")
}

model Property {
  id            Int      @id @default(autoincrement())
  title         String
  description   String   @default("")
  price         String
  type          PropertyType
  status        PropertyStatus
  location      String
  address       String
  rooms         Int      @default(0)
  amenities     String   @default("")
  coordinates   String   @default("")
  viewsThisWeek Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  imageUrl      String?
  agentId       String

  agent         Agent    @relation("AgentToProperties", fields: [agentId], references: [agentId])
  likedByUsers  User[]   @relation("LikedProperties")
}

enum PropertyType {
  Residential
  Booking
  For_Rent
  For_Sale
  Business
  Student
  Lodges
  BookingHouse
}

enum PropertyStatus {
  Available
  Booked
  Rented
  Sold
  For_Sale
  For_Rent
}



